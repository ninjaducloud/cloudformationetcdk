AWSTemplateFormatVersion: 2010-09-09

# Gabarit CloudFormation - Mois du DevOps chez COFOMO  
# Ensemble des ressources dans le meme AZ. Pour demo seulement.
Parameters:
  CidrBlock:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.0.0/20
    Description: VPC CIDR Block (eg 10.0.0.0/20)
    Type: String

  AvailabilityZone:
      Description: AZ a utiliser
      Type: AWS::EC2::AvailabilityZone::Name
    
  PublicSubnetCIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.0.0/22
    Description: VPC CIDR Block pour le sous-reseau publique (eg 10.0.0.0/22)
    Type: String

  PrivateSubnet1CIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.4.0/22
    Description: VPC CIDR Block pour le 1er sous-reseau prive(eg 10.0.4.0/22)
    Type: String

  PrivateSubnet2CIDR:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.8.0/22
    Description: VPC CIDR Block pour le 2ieme sous-reseau prive(eg 10.0.8.0/22)
    Type: String

  InstanceType:
    Description: Type instance EC2
    Type: String
    Default: t2.small
    AllowedValues:
    - t2.nano
    - t2.micro
    - t2.small
    - t3.micro
    - t3.nano
    - t3.small
    - t3a.micro
    - t3a.nano
    - t3a.small
    ConstraintDescription: Doit-etre un type EC2 supporte.

Mappings:
  Constants:
    Suffix:
      Value: "VPN-Client-Sample"

  AWSInstanceType2Arch:
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t3.micro:
      Arch: HVM64
    t3.nano:
      Arch: HVM64
    t3.small:
      Arch: HVM64
    t3a.micro:
      Arch: HVM64
    t3a.nano:
      Arch: HVM64
    t3a.small:
      Arch: HVM64
    
  AWSRegionArch2AMI:
    us-east-1:
      HVM64: ami-01cc34ab2709337aa
    us-west-2:
      HVM64: ami-0e5b6b6a9f3db6db8 
    ca-central-1:
      HVM64: ami-0d8ad3ab25e7abc51

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:  VPC-Demo-Mois-DevOps

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:  IGW-Demo-Mois-DevOps

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value:  RT-Public-Demo-Mois-DevOps
      VpcId:
        Ref: VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: RouteTable

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:  Public-Subnet-Demo-Mois-DevOps
      VpcId: !Ref VPC

  SubnetPublicAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: RouteTable
      SubnetId:
        Ref: PublicSubnet

  MyEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
   Type: AWS::EC2::NatGateway
   Properties:
      AllocationId:
         Fn::GetAtt:
         - MyEIP
         - AllocationId
      SubnetId:
         Ref: PublicSubnet
      Tags:
        - Key: Name
          Value:  NAT-Demo-Mois-DevOps


  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private-Subnet1-Demo-Mois-DevOps
      VpcId: !Ref VPC

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone 
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name 
          Value: Private-Subnet2-Demo-Mois-DevOps
      VpcId: !Ref VPC 

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value:  RT-Private1-Demo-Mois-DevOps
      VpcId:
        Ref: VPC

  RouteVersNATGateway:
    Type: AWS::EC2::Route
    Properties:
        RouteTableId:
          Ref: PrivateRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId:
          Ref: NatGateway

  SubnetPrivateAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnet1

  SubnetPrivateAssocSubnetPrivate2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      SubnetId:
        Ref: PrivateSubnet2

  LinuxInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
      - !GetAtt InstanceSecurityGroup.GroupId
      ImageId: 
        Fn::FindInMap:
        - AWSRegionArch2AMI
        - Ref: AWS::Region
        - Fn::FindInMap:
          - AWSInstanceType2Arch
          - Ref: InstanceType
          - Arch
      SubnetId: !Ref PrivateSubnet1
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 10
      IamInstanceProfile: !Ref DemoInstanceProfile
      Tags:
        -
          Key: Name
          Value:  VMLinux-Demo-Mois-DevOps

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Rend SSH dispo port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ssm-role
      Description: Role pour SSM
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  DemoInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: demo-ec2-instance-profile
      Path: /
      Roles: 
       - !Ref EC2InstanceRole

# https://www.wellarchitectedlabs.com/reliability/200_labs/200_deploy_and_update_cloudformation/5_add_ec2/
# Faire version avec obtention AMI tel exemple ici.


# https://aws.amazon.com/premiumsupport/knowledge-center/ec2-systems-manager-vpc-endpoints/